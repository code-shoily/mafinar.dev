<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PragProWriMo on mafinar.dev</title>
    <link>/tags/pragprowrimo/</link>
    <description>Recent content in PragProWriMo on mafinar.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Mafinar K. 2021</copyright>
    <lastBuildDate>Tue, 02 Nov 2021 00:34:12 -0400</lastBuildDate><atom:link href="/tags/pragprowrimo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Picking garbages in groups</title>
      <link>/posts/advent-of-code-2017-09/</link>
      <pubDate>Tue, 02 Nov 2021 00:34:12 -0400</pubDate>
      
      <guid>/posts/advent-of-code-2017-09/</guid>
      <description>In today&amp;rsquo;s post, I will describe my solution to Advent of Code year 2017, day 9&amp;rsquo;s challenge. Let&amp;rsquo;s read the challenge description before the explanation.
Part 1 Part 1 of the problem expects us to report the total number of groups, as collected from the stream of characters. The rules are simple:
 { marks the beginning of the group unless that&amp;rsquo;s found in the garbage } marks the end of the group unless that&amp;rsquo;s found in the garbage First group encounter will have the level of 1, nested groups will have their levels as their depth, as an example, the innermost group of {{{}}} will have level of 3.</description>
      <content>&lt;p&gt;In today&amp;rsquo;s post, I will describe my solution to Advent of Code year 2017, day 9&amp;rsquo;s challenge. Let&amp;rsquo;s &lt;a href=&#34;https://adventofcode.com/2017/day/9&#34;&gt;read the challenge description&lt;/a&gt; before the explanation.&lt;/p&gt;
&lt;h2 id=&#34;part-1&#34;&gt;Part 1&lt;/h2&gt;
&lt;p&gt;Part 1 of the problem expects us to report the total number of groups, as collected from the stream of characters. The rules are simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{&lt;/code&gt; marks the beginning of the group &lt;strong&gt;unless that&amp;rsquo;s found in the garbage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt; marks the end of the group &lt;strong&gt;unless that&amp;rsquo;s found in the garbage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;First group encounter will have the level of &lt;code&gt;1&lt;/code&gt;, nested groups will have their levels as their depth, as an example, the innermost group of &lt;code&gt;{{{}}}&lt;/code&gt; will have level of &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Groups are separated by commas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that is the easy part, let&amp;rsquo;s get to the garbage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; marks the beginning of garbage, anything after that are garbage (including &lt;code&gt;{&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;), until&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is found. That marks the end of the garbage.&lt;/li&gt;
&lt;li&gt;If within the garbage, an &lt;code&gt;!&lt;/code&gt; is encountered, then the following character is discarded, whether it is another &lt;code&gt;!&lt;/code&gt; or any other delimiters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The puzzle description has great examples of what constitutes garbages and groups, and streams that would be puzzling to the eyes (such as &lt;code&gt;}&lt;/code&gt; inside garbage or &lt;code&gt;&amp;gt;&lt;/code&gt; after discards) are also there, so this problem is very test-case friendly.&lt;/p&gt;
&lt;p&gt;Our goal for this part is to add up all the group levels accummulated from the stream.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The solution&lt;/h3&gt;
&lt;p&gt;This problem smelled like state machine and when dealing with F#, I could immediately picture a solution in my head. But what would aid me more is a picture of the state transitions. So I fired up a &lt;a href=&#34;https://mermaid.live/&#34;&gt;Mermaid Live&lt;/a&gt; and type in the following state transitions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stateDiagram-v2
    [*] --&amp;gt; GroupStarted: &amp;quot;{&amp;quot; level++
    GroupStarted --&amp;gt; GroupEnded: &amp;quot;}&amp;quot; level--
    GroupStarted --&amp;gt; GarbageStarted: &amp;quot;&amp;lt;&amp;quot;
    GarbageStarted --&amp;gt; GarbageEnded: &amp;quot;&amp;gt;&amp;quot;
    GarbageEnded --&amp;gt; GroupEnded: &amp;quot;}&amp;quot;
    GarbageStarted --&amp;gt; DiscardNext: &amp;quot;!&amp;quot;
    DiscardNext --&amp;gt; GarbageStarted: Any character
    GarbageStarted --&amp;gt; GarbageStarted: Any character EXCEPT &amp;quot;&amp;gt;&amp;quot; and &amp;quot;!&amp;quot;
    GroupEnded --&amp;gt; GroupEnded: &amp;quot;,&amp;quot;
    GroupEnded --&amp;gt; GroupStarted: &amp;quot;{&amp;quot;
    GroupEnded --&amp;gt; [*]: All characters processed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the following image is produced:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/state-chart.png&#34; alt=&#34;Alt text&#34; title=&#34;State Machine&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see that, there is a &lt;code&gt;GroupMode&lt;/code&gt; and a &lt;code&gt;GarbageMode&lt;/code&gt; and the upcoming character has different effect to the overall state in different &lt;code&gt;Mode&lt;/code&gt;-s. There is also a &lt;code&gt;DiscardMode&lt;/code&gt; that discards the upcoming character, thereby affecting the closing of &lt;code&gt;GarbageMode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How would the F# look like?&lt;/p&gt;
&lt;p&gt;Since we are dealing with streams, we can go for a recursive function, that processes a list in &lt;code&gt;head :: rest&lt;/code&gt; pattern. And we can have a state type representing the state of the state machine. We can then have a &lt;code&gt;collection&lt;/code&gt; function that takes in a state, and then recursively calls itself, processing one character at a time - a character that resides inside the state.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see what can we have in the state type-&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CollectionState&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
      Count&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; int
      GarbageMode&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
      DiscardMode&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
      Total&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; int &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we have a &lt;code&gt;GarbageMode&lt;/code&gt; and a &lt;code&gt;DiscardMode&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt; representing the characters we have left to process (and classify as a garbage or collect as a group), and &lt;code&gt;Total&lt;/code&gt; which is a sum-total of the groups collected. The &lt;code&gt;Count&lt;/code&gt; variable here adds the depth of the group.&lt;/p&gt;
&lt;p&gt;So from that definition, we have the terminating condition of the processing, when the &lt;code&gt;Stream&lt;/code&gt; is empty (aka we have processed everything). If we patternize the &lt;code&gt;Stream&lt;/code&gt; as &lt;code&gt;current :: upcoming&lt;/code&gt;, then just by giving &lt;code&gt;Stream&lt;/code&gt; the value of &lt;code&gt;upcoming&lt;/code&gt;, we are progressing through the list, churning characters. Also, we want the &lt;code&gt;Total&lt;/code&gt; to have the total number of groups.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s see how a preliminary version of the function look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rec collect_groups &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CollectionState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; total
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; remaining
        Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        collect_groups
            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                    Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining
                    Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, if we pass &lt;code&gt;{ Stream = input; Count = 1; GarbageMode = false; DiscardMode = false; Total = 0 }&lt;/code&gt; to it where &lt;code&gt;input&lt;/code&gt; is a string &lt;code&gt;|&amp;gt; List.ofSeq&lt;/code&gt;ified, we will, unsurprisingly, get the number of characters in that string. Because we didn&amp;rsquo;t deal with the &lt;code&gt;Mode&lt;/code&gt;-s, or character effects as portrayed in the state-chart above.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now assume that there is just one mode - the group mode, and our input is a lot simpler one - one comprising of &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;,&lt;/code&gt; to separated them. Let&amp;rsquo;s refer back to the state chart and see what we can do -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rec collect_groups &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CollectionState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; total
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; remaining
        Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count
        Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        collect_groups
            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                    Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining
                    Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1
                    Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; remaining
        Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        collect_groups
            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                    Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining
                    Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; remaining &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; collect_groups &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; failwith &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid State&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time, we compute the level and sum them up, provided we are given only &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt; amd &lt;code&gt;,&lt;/code&gt;. For example, giving &lt;code&gt;&amp;quot;{{{}},{},{},{{}}}&amp;quot; |&amp;gt; List.ofSeq&lt;/code&gt; would give us &lt;code&gt;15&lt;/code&gt;. However, the input given in the problem wouldn&amp;rsquo;t, because I intentionally made invalid state irrepresentable through that &lt;code&gt;failwith&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So when would a &lt;code&gt;&amp;lt;&lt;/code&gt; constitute the beginning of a garbage? When &lt;code&gt;GarbageMode&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;DiscardMode&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. And &lt;code&gt;&amp;gt;&lt;/code&gt; will mark the end of a garbage when &lt;code&gt;GarbageMode&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;DiscardMode&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. So, the pattern above will be updated with a &lt;code&gt;{GarbageMode = false}&lt;/code&gt; to ensure that group is formed if and only if it is not in &lt;code&gt;GarbageMode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if we refer to the state chart, we see that &lt;code&gt;DiscardNext&lt;/code&gt; only takes place AFTER &lt;code&gt;GarbageStarted&lt;/code&gt; happens. In other words, there is no scenario where &lt;code&gt;DiscardNext&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;GarbageMode&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, that would be impossible state, therefore, our matching should reflect that. And when in &lt;code&gt;DiscardMode&lt;/code&gt;, the flow is just &lt;code&gt;{Stream = rest}&lt;/code&gt;ed, and the &lt;code&gt;DiscardMode&lt;/code&gt; is immediately turned &lt;code&gt;off&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if we combine the pattern above with the state chart, we can easily visualize and form the function in full -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rec collect_groups &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CollectionState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; total
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest
        Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count
        GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest
                Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1
                Total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest
        Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count
        GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest
                Count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest
        GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest
                GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest
        DiscardMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest
                DiscardMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest
        GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest
                DiscardMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest
        GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest
                GarbageMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; rest &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; state &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rest &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; collect_groups
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it worked on my machine!&lt;/p&gt;
&lt;p&gt;A few things I learned while doing this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learned to love &lt;code&gt;{ state with ...}&lt;/code&gt; instead of forming the whole thing&lt;/li&gt;
&lt;li&gt;Made sure to not provide unnecessary patterns (i.e. &lt;code&gt;GarbageMode = true&lt;/code&gt; when that branch can never have &lt;code&gt;GarbageMode&lt;/code&gt; as true), this took a refactor and I think wasn&amp;rsquo;t totally necessary.&lt;/li&gt;
&lt;li&gt;Resisted the temptation to use tuples. Tuple could have been fine, but I preferred having the attributes in my face, instead of just a group of values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This problem was fun to solve, and I thought I&amp;rsquo;d write about it here. Also, this had similarities with the &lt;a href=&#34;/posts/many-ways-to-reach-a-floor/&#34;&gt;first blog post I wrote in this site&lt;/a&gt; - with an added complication.&lt;/p&gt;
&lt;p&gt;Now, about Part 2 of the problem, it was very much similar to part 1 with different logic to compute the &lt;code&gt;Count&lt;/code&gt; and &lt;code&gt;Total&lt;/code&gt;. And the fact I called &lt;code&gt;Count&lt;/code&gt; &lt;code&gt;Count&lt;/code&gt; instead of the more semantically appropriate &lt;code&gt;Level&lt;/code&gt; has to do with the fact I reused this state for &lt;code&gt;Part 2&lt;/code&gt; and extracted the snippets from my original code. Both solutions can be &lt;a href=&#34;https://github.com/code-shoily/AdventOfCode/blob/master/fsharp/Y17/Year2017Day09.fs&#34;&gt;viewed from the repository&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
